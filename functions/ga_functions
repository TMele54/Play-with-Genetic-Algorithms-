from __future__ import division
import pandas as pd
from collections import namedtuple
import operator
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
from random import randint
import random as rand
import math
import pickle
from collections import namedtuple
from shapely.geometry import Point
from shapely.geometry.polygon import Polygon
from scipy.special import binom
import matplotlib.pyplot as plt
import numpy as np



#makes random manifold
def get_manifold():
    def new_space():
        # GET AMEBA
        bernstein = lambda n, k, t: binom(n, k) * t ** k * (1. - t) ** (n - k)

        rad = 0.2
        edgy = 0.05
        scale = 1000
        points = list()

        def bezier(points, num=200):
            N = len(points)
            t = np.linspace(0, 1, num=num)
            curve = np.zeros((num, 2))
            for i in range(N):
                curve += np.outer(bernstein(N - 1, i, t), points[i])
            return curve
        class Segment():
            def __init__(self, p1, p2, angle1, angle2, **kw):
                self.p1 = p1;
                self.p2 = p2
                self.angle1 = angle1;
                self.angle2 = angle2
                self.numpoints = kw.get("numpoints", 100)
                r = kw.get("r", 0.3)
                d = np.sqrt(np.sum((self.p2 - self.p1) ** 2))
                self.r = r * d
                self.p = np.zeros((4, 2))
                self.p[0, :] = self.p1[:]
                self.p[3, :] = self.p2[:]
                self.calc_intermediate_points(self.r)
            def calc_intermediate_points(self, r):
                self.p[1, :] = self.p1 + np.array([self.r * np.cos(self.angle1),
                                                   self.r * np.sin(self.angle1)])
                self.p[2, :] = self.p2 + np.array([self.r * np.cos(self.angle2 + np.pi),
                                                   self.r * np.sin(self.angle2 + np.pi)])
                self.curve = bezier(self.p, self.numpoints)
        def get_curve(points, **kw):
            segments = []
            for i in range(len(points) - 1):
                seg = Segment(points[i, :2], points[i + 1, :2], points[i, 2], points[i + 1, 2], **kw)
                segments.append(seg)
            curve = np.concatenate([s.curve for s in segments])
            return segments, curve
        def ccw_sort(p):
            d = p - np.mean(p, axis=0)
            s = np.arctan2(d[:, 0], d[:, 1])
            return p[np.argsort(s), :]
        def get_bezier_curve(a, rad=0.2, edgy=0):
            """ given an array of points *a*, create a curve through
            those points.
            *rad* is a number between 0 and 1 to steer the distance of
                  control points.
            *edgy* is a parameter which controls how "edgy" the curve is,
                   edgy=0 is smoothest."""
            p = np.arctan(edgy) / np.pi + .5
            a = ccw_sort(a)
            a = np.append(a, np.atleast_2d(a[0, :]), axis=0)
            d = np.diff(a, axis=0)
            ang = np.arctan2(d[:, 1], d[:, 0])
            f = lambda ang: (ang >= 0) * ang + (ang < 0) * (ang + 2 * np.pi)
            ang = f(ang)
            ang1 = ang
            ang2 = np.roll(ang, 1)
            ang = p * ang1 + (1 - p) * ang2 + (np.abs(ang2 - ang1) > np.pi) * np.pi
            ang = np.append(ang, [ang[0]])
            a = np.append(a, np.atleast_2d(ang).T, axis=1)
            s, c = get_curve(a, r=rad, method="var")
            x, y = c.T
            return x, y, a
        def get_random_points(n=5, scale=scale, mindst=None, rec=0):
            """ create n random points in the unit square, which are *mindst*
            apart, then scale them."""
            mindst = mindst or .7 / n
            a = np.random.rand(n, 2)
            d = np.sqrt(np.sum(np.diff(ccw_sort(a), axis=0), axis=1) ** 2)
            if np.all(d >= mindst) or rec >= 200:
                return a * scale
            else:
                return get_random_points(n=n, scale=scale, mindst=mindst, rec=rec + 1)
        a = get_random_points(n=10, scale=scale)
        x, y, _ = get_bezier_curve(a, rad=rad, edgy=edgy)
        for i in range(0, len(x)):
            points.append((x[i], y[i]))

        points2 = x, y

        # plt.plot(x,y)
        # plt.show()
        space = Polygon(points)
        return space, points, points2  # polygon, (x,y), [[x],[y]]

    def save_space(space):
        with open('space.pickle', 'wb') as f:
            pickle.dump(space, f)
        return space

    def load_space():
        with open('space.pickle', 'rb') as f:
            space = pickle.load(f)
        return space

    def in_space(point, space):
        point = Point(point[0], point[1])  # point id in form   0.5,0.5   no tup or list
        return space.contains(point)

    ameba, points, XYpoints = save_space(new_space())
    return ameba, points, XYpoints

# is point on manifold
def in_space(point, space):
    point = Point(point[0], point[1])  # point id in form   0.5,0.5   no tup or list
    return space.contains(point)

#creates n cirles
def make_circles(popSize):
    population = []

    for i in range(0, popSize):
        R = 1  # randint(1, dR)
        X = rand.randint(1, 100)
        Y = rand.uniform(1, 100)
        l = 1

        totalY = Y + R
        totalX = X + R

        lessX = X - R
        lessY = Y - R

        while totalX > dX:
            X = X - (l + 1)
            totalX = X + R
        while totalY > dY:
            Y = Y - (l + 1)
            totalY = Y + R
        while lessX < R:
            X = X + (l + 1)
            lessX = X - R
        while lessY < R:
            Y = Y + (l + 1)
            lessY = Y - R
        print circCreature(X, Y, R, l)
        population.append(circCreature(X, Y, R, l))
    return population

# creates first set of circles
def initialPopulation(popSize):

    population = make_circles(popSize)

    ameba, points, XYpoints = get_manifold()
    print population

    # display initial population
    plot_circles_ameba(coorSpace=coorSpace, points=XYpoints, polygon=ameba, creatures=population)

    return population

# distance from circle center to target circle center
def distance(p0, p1):  # (X1,Y1), (X2,Y2)
    return math.hypot(p1[0] - p0[0], p1[1] - p0[1])

# area in units of intersection between a circle and the target circl
def intersectionArea(d, a, b):
    R = a.R
    r = b["R"]

    if d <= abs(R - r): # Concentric
        return np.pi * min(R, r) ** 2

    if d >= r + R: # too far apart
        return 0

    r2, R2, d2 = r ** 2, R ** 2, d ** 2
    alpha = np.arccos((d2 + r2 - R2) / (2 * d * r))
    beta = np.arccos((d2 + R2 - r2) / (2 * d * R))

    return (r2 * alpha + R2 * beta - 0.5 * (r2 * np.sin(2 * alpha) + R2 * np.sin(2 * beta)))

# performs distance function
def centerDistanceMethod(a, b):
    aCenter= [a.X, a.Y]
    bCenter = [b["X"], b["Y"]]
    centerDistance = distance(aCenter, bCenter)

    return [centerDistance]

# rank order the distance
def rankProperties(generation, tBB):
    ranks = list()

    for i in range(0, len(generation)):
        d = centerDistanceMethod(generation[i], tBB)[0]
        a = intersectionArea(d, generation[i], tBB)
        ranks.append((i, a, d))

    ranks.sort(key=lambda tup: tup[1])  # intersection is less important than distance..
    ranks.sort(key=lambda tup: tup[2])

    return ranks

# select those to continue in the next generation
def artificialSelection(genRanked, eliteSize):
    print "*" * 100
    selectionResults = []
    df = pd.DataFrame(np.array(genRanked), columns=["Index", "Area", "Distance"])
    df['cum_sum'] = df.Area.cumsum()
    df['cum_perc'] = 100 * df.cum_sum / df.Area.sum()

    # get all elite (need adjustment here...)
    for i in range(0, eliteSize):
        selectionResults.append(genRanked[i][0])

    # randomly get creatures
    for i in range(0, len(genRanked) - eliteSize):
        pick = 100 * rand.random()
        for i in range(0, len(genRanked)):

            if pick <= df.iat[i, 3]:
                selectionResults.append(genRanked[i][0])
                break

    return selectionResults

# group of those whose genes will be passed on
def matingPool(generation, selectResults):
    pool = []

    # get selected creatures by their index..
    for i in range(0, len(selectResults)):
        index = selectResults[i]
        pool.append(generation[index])

    return pool

# special editing space for child circles (ie if a child's circle would extend beyond the cord space)
def CRISPR(genes):
    dX, dY = genes[0], genes[1]
    X, Y, R, l = genes[2][0], genes[2][1], genes[2][2], genes[2][3]

    totalY = Y + R
    totalX = X + R

    lessX = X - R
    lessY = Y - R

    while totalX > dX:
        X = X - (l + 1)
        totalX = X + R
    while totalY > dY:
        Y = Y - (l + 1)
        totalY = Y + R
    while lessX < R:
        X = X + (l + 1)
        lessX = X - R
    while lessY < R:
        Y = Y + (l + 1)
        lessY = Y - R

    editedGenes = X, Y, R, l

    return editedGenes

# breed, exchange of genes
def breed(parent1, parent2, dX, dY, dR):
    # just being explicit
    geneA = [parent1[0], parent1[1]]
    geneB = [parent2[2]]
    genes = geneA[0], geneA[1], geneB[0], 5
    # keep circles from going off the page..
    editedGenes = CRISPR((dX, dY, genes)) ################################################dRdRdR

    eG = editedGenes
    child = circCreature(eG[0], eG[1], eG[2], eG[3])

    return child

# calls breed function
def breedPopulation(matingpool, eliteSize, dX, dY, dR):
    children = []

    # the elite are passed onto the next generation
    length = len(matingpool) - eliteSize

    # randomize positions..
    pool = rand.sample(matingpool, len(matingpool))

    # keep the elite
    for i in range(0, eliteSize):
        children.append(matingpool[i])

    # do breeding
    for i in range(0, length):
        child = breed(pool[i], pool[len(matingpool) - i - 1], dX, dY, dR)
        children.append(child)

    return children

# gives a random mutation (new circle dims, simple change)
def mutate(individual, mutationRate):
    if (rand.random() < mutationRate):
        # circCreature(X=11, Y=48, H=1152, W=889, l=3)

        R = randint(1, dR)
        X = randint(1, dX)
        Y = randint(1, dY)
        l = 3

        totalY = Y + R
        totalX = X + R

        lessX = X - R
        lessY = Y - R

        while totalX > dX:
            X = X - (l + 1)
            totalX = X + R
        while totalY > dY:
            Y = Y - (l + 1)
            totalY = Y + R
        while lessX < R:
            X = X + (l + 1)
            lessX = X - R
        while lessY < R:
            Y = Y + (l + 1)
            lessY = Y - R

        individual = circCreature(X, Y, R, l)
    return individual

# performs mutations
def mutatePopulation(children, mutationRate):
    mutatedPop = []

    for individual in range(0, len(children)):
        mutatedIndividual = mutate(children[individual], mutationRate)
        mutatedPop.append(mutatedIndividual)

    return mutatedPop

# plots circles
def plotcircles(coorSpace, tBB, creatures):
    corSpace = np.array(np.zeros(coorSpace), dtype=np.uint16)
    fig, ax = plt.subplots(1, figsize=(16, 16))
    print len(creatures)
    m = 0
    for cre in creatures:
        m += 1

        ax.imshow(corSpace)
        circ = patches.Circle((tBB["X"], tBB["Y"]), tBB["R"], linewidth=tBB["l"], edgecolor='b', facecolor='none')
        ax.add_patch(circ)

        node_patch = patches.Circle((cre[0], cre[1]),cre[2],lw=cre[3],color="r",zorder=2, facecolor='none')
        ax.add_patch(node_patch)

        plt.pause(0.3)
        ax.cla()
    #plt.plot(XYpoints)
    plt.show()

def plot_circles_ameba(coorSpace, points, polygon, creatures):
    fig = plt.figure(figsize=(16, 16), dpi=200)
    ax = fig.add_subplot(1, 1, 1, aspect=1)
    ax.grid(linestyle="--", linewidth=0.5, color='.25', zorder=-10)
    ax.set_title("Points of Manifold", fontsize=20, verticalalignment='bottom')
    ax.set_xlabel("X Axis")
    ax.set_ylabel("Y Axis")

    m = 0,

    def draw_circle(x, y, radius, color):
        from matplotlib.patches import Circle
        from matplotlib.patheffects import withStroke
        circle = Circle((cre[0], cre[1]),radius,lw=cre[1],color=color,zorder=2, facecolor='none')
        ax.add_artist(circle)

    m=0
    for cre in creatures:

        m += 1
        # this works to plot the Path
        ax.plot(points[1],points[0])

        if in_space((cre[0], cre[1]), polygon) == True:
            draw_circle(cre[0], cre[1], 0.1, 'blue')
        else:
            draw_circle(cre[0], cre[1], 0.1, 'red')
    plt.show()
    #plt.plot(points)
    #plt.show()
    return None

# creates new generation

def newGeneration(pop, mutationRate, eliteSize, dX, dY, dR):

    genRanked = rankProperties(generation=pop, tBB=tBB)

    print "Current Population Size:", len(genRanked)
    # execute artificial process of natural selection
    chosenOnes = artificialSelection(genRanked=genRanked, eliteSize=eliteSize)

    print "Chosen Ones:", len(chosenOnes)
    # Gather parents for breeding
    pool = matingPool(generation=pop, selectResults=chosenOnes)

    # print "Mating pool", len(pool)
    # breed the mating pool to obtain children.. children will take on X,Y and H,W genes from parents
    children = breedPopulation(matingpool=pool, eliteSize=eliteSize, dX=dX, dY=dY, dR=dR)

    # mutations
    nextGeneration = mutatePopulation(children=children, mutationRate=mutationRate)

    return nextGeneration

# runs Genetic algorithm
def geneticAlgorithm(popSize, eliteSize, mutationRate, generations, dX, dY, dR):
    # get a first population or circles and their intersection areas
    pop = initialPopulation(popSize=popSize)

    creatures = list()
    print "Initial Population", len(pop)

    for i in range(0, generations):
        print "Computing Generation: {-", i, "-} of", generations, " generations.."
        pop = newGeneration(pop=pop, mutationRate=mutationRate, eliteSize=eliteSize, dX=dX, dY=dY, dR=dR)

        bestcircIndex = rankProperties(pop, tBB)[0][0]
        bestcirc = pop[bestcircIndex]
        creatures.append(bestcirc)

# val = intersectionPercentage(bestcirc, tBB)
            # with open("../xtr/example.txt", "a") as f:
            #    f.write(str(val)+ "," + str(i) + '\n')
            #    f.close()


    print "Total Top Creatures:", len(creatures)
    creatures = set(creatures)
    print "Unique Creatures:", len(set(creatures))

    # plotBestCircles(coorSpace=coorSpace, tBB=tBB, creatures=bestcirc)
   # plotcircles(coorSpace=coorSpace, tBB=tBB, creatures=creatures)

    return None
